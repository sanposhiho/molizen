// Code generated by Molizen. DO NOT EDIT.

// Package actor_user is a generated Molizen package.
package actor_user

import (
	sync "sync"

	actor "github.com/sanposhiho/molizen/actor"
	"github.com/sanposhiho/molizen/actorrepo/memory"
	context "github.com/sanposhiho/molizen/context"
	future "github.com/sanposhiho/molizen/future"
)

// UserActor is a actor of User interface.
type UserActor struct {
	name     string
	lock     sync.Mutex
	internal User
}

type User interface {
	SetAge(ctx context.Context, age int)
	GetAge(ctx context.Context) int
}

// NewResult is the result type for New.
type NewResult struct {
	Actor UserActor
	// Error is an error that occurred during New.
	Error error
}

func New(ctx context.Context, internal User, opts actor.Option) *future.Future[NewResult] {
	opts.Complete()
	// TODO: make it selectable for users.
	repo := memory.New[*UserActor]()
	context.RegisterActorRepo(ctx, repo)
	f := future.New[NewResult]()
	go func() {
		actor := UserActor{
			internal: internal,
			name:     opts.ActorName,
		}
		_, err := repo.Apply(&actor)
		f.Send(NewResult{Actor: actor, Error: err})
	}()

	return f
}

// ActorName returns the actor's name.
func (a *UserActor) ActorName() string {
	return a.name
}

// GetAgeResult is the result type for GetAge.
type GetAgeResult struct {
	Ret0 int
}

// GetAge actor base method.
func (a *UserActor) GetAge(ctx context.Context) *future.Future[GetAgeResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[GetAgeResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		ret0 := a.internal.GetAge(newctx)

		ret := GetAgeResult{
			Ret0: ret0,
		}

		f.Send(ret)
	}()

	return f
}

// SetAgeResult is the result type for SetAge.
type SetAgeResult struct {
}

// SetAge actor base method.
func (a *UserActor) SetAge(ctx context.Context, age int) *future.Future[SetAgeResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SetAgeResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.SetAge(newctx, age)

		ret := SetAgeResult{}

		f.Send(ret)
	}()

	return f
}
