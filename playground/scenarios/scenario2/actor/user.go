// Code generated by Molizen. DO NOT EDIT.

// Package actor_user is a generated Molizen package.
package actor_user

import (
	sync "sync"

	actor "github.com/sanposhiho/molizen/actor"
	"github.com/sanposhiho/molizen/actorrepo/memory"
	context "github.com/sanposhiho/molizen/context"
	future "github.com/sanposhiho/molizen/future"
)

// UserActor is a actor of User interface.
type UserActor struct {
	name     string
	lock     sync.Mutex
	internal User
}

type User interface {
	Name(ctx context.Context) string
	SendPing(ctx context.Context, to *UserActor)
	Ping(ctx context.Context, from *UserActor)
	Pong(ctx context.Context)
	SetSelf(ctx context.Context, self *UserActor)
}

// NewResult is the result type for New.
type NewResult struct {
	Actor UserActor
	// Error is an error that occurred during New.
	Error error
}

func New(ctx context.Context, internal User, opts actor.Option) *future.Future[NewResult] {
	opts.Complete()
	// TODO: make it selectable for users.
	repo := memory.New[*UserActor]()
	context.RegisterActorRepo(ctx, repo)
	f := future.New[NewResult]()
	go func() {
		actor := UserActor{
			internal: internal,
			name:     opts.ActorName,
		}
		_, err := repo.Apply(&actor)
		f.Send(NewResult{Actor: actor, Error: err})
	}()

	return f
}

// ActorName returns the actor's name.
func (a *UserActor) ActorName() string {
	return a.name
}

// NameResult is the result type for Name.
type NameResult struct {
	Ret0 string
}

// Name actor base method.
func (a *UserActor) Name(ctx context.Context) *future.Future[NameResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[NameResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		ret0 := a.internal.Name(newctx)

		ret := NameResult{
			Ret0: ret0,
		}

		f.Send(ret)
	}()

	return f
}

// PingResult is the result type for Ping.
type PingResult struct {
}

// Ping actor base method.
func (a *UserActor) Ping(ctx context.Context, from *UserActor) *future.Future[PingResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[PingResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.Ping(newctx, from)

		ret := PingResult{}

		f.Send(ret)
	}()

	return f
}

// PongResult is the result type for Pong.
type PongResult struct {
}

// Pong actor base method.
func (a *UserActor) Pong(ctx context.Context) *future.Future[PongResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[PongResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.Pong(newctx)

		ret := PongResult{}

		f.Send(ret)
	}()

	return f
}

// SendPingResult is the result type for SendPing.
type SendPingResult struct {
}

// SendPing actor base method.
func (a *UserActor) SendPing(ctx context.Context, to *UserActor) *future.Future[SendPingResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SendPingResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.SendPing(newctx, to)

		ret := SendPingResult{}

		f.Send(ret)
	}()

	return f
}

// SetSelfResult is the result type for SetSelf.
type SetSelfResult struct {
}

// SetSelf actor base method.
func (a *UserActor) SetSelf(ctx context.Context, self *UserActor) *future.Future[SetSelfResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SetSelfResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.SetSelf(newctx, self)

		ret := SetSelfResult{}

		f.Send(ret)
	}()

	return f
}
